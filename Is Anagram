//Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.

//An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.


class mySolution {
    public HashMap<Character, Integer> StringMap(String s){
        HashMap<Character, Integer> Smap = new HashMap<>();
        for(int i=0; i<s.length(); i++){
            char key = s.charAt(i);
            Smap.put(key, Smap.getOrDefault(key,0)+1); //if key doesn't exist, will return default value 0;

            //getOrDefault方法: public V getOrDefault(Object key, V defaultValue)
            /*
            getOrDefault方法是Java 8引入的HashMap类的一部分。
            它允许你在试图获取一个键的值时提供一个默认值。
            如果指定的键在HashMap中不存在，getOrDefault方法将返回你提供的默认值，而不是返回null。
            这可以简化一些常见的编程模式，并使代码更清晰。
            */


        }
        return Smap;
    }
    
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()){
            return false;
        }
        HashMap<Character, Integer> Smap = StringMap(s);
        HashMap<Character, Integer> Tmap = StringMap(t);

        return Smap.equals(Tmap);

}

//参考答案
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) return false;

        int[] store = new int[26];

        for (int i = 0; i < s.length(); i++) {
            store[s.charAt(i) - 'a']++;
            store[t.charAt(i) - 'a']--;
        }

        for (int n : store) if (n != 0) return false;

        return true;
    }
}


